bool comparator(Interval a, Interval b){
    return a.start<=b.start;
}
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
vector<Interval> Solution::insert(vector<Interval> &intervals, Interval newInterval) { 
    vector<Interval> ans;
    sort(intervals.begin(),intervals.end(),comparator);
    
    for(Interval test: intervals){
        if (newInterval.start > test.end) ans.push_back(test);
        else if(test.start > newInterval.end) {
            ans.push_back(newInterval);
            newInterval = test;
        } else if (newInterval.start <= test.end || newInterval.end >= test.start) {
            newInterval = Interval(min(test.start, newInterval.start), max(test.end, newInterval.end));
        }
    } 
    ans.push_back(newInterval);
    return ans;
}
